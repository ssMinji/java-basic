package scheduler;

public interface Scheduler {
	void getNextCall(); // 다음 고객의 콜 가져오는 것
	void sendCallToAgent(); // 상담원에게 콜을 던지는 것 
	//이 떄 해당 콜 분배에 대한 정책이 여러개가 있을 수 있으므로 각 정책별로 구현하면 되는 것 
	
	// 하나씩 하나씩 던져준다
	// 쉬고있거나 대기열이 제일 짧은 상담원에게 분배  
	// 우선순위가 높은 고객을 먼저 분배해줌
	// 이는 모두 인터페이스를 implements 해야 함 
	
	// 클라이언트코드는  각 클래스가 어떻게 구현되었는지 구체적인 코드는 볼 필요가 없이 
	// Scheduler라는 타입을 구현한 어떠한 클래스들이 있는지를 알면 해당 클래스들이 구현한 메서드들에는 어떤것들이 있다.를 알 수 있기 때문에  
	// 인터페이스만을 보고 인스턴스를 가져다 쓸 수 있음 
	// 따라서 인터페이스를 클라이언트코드의 스펙이라고 함. 상호간의 약속.  
	// 클라이언트가 인스턴스들을 가져다 쓰는 것은 맞는데, 각각의 구현된 방법을 일일이 알 필요가 없이 
	// Scheduler라는 인터페이스의 명세만 보고 가져다 쓸 수 있게끔 하는 것이 인터페이스에 기반한 코딩임
	// 여러가지 정책들을 구현할 때 가장 많이 사용함 
	
	
}
