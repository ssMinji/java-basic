package org.tutorials.javatutorials.poly;

interface I2{
	// A메소드 정의 강제
    public String A();
}
interface I3{
	// B 메소드 정의 강제 
    public String B();
}
class D implements I2, I3{
	// I2 인터페이스에 따라 A 메소드 구현
    public String A(){
        return "A";
    }
    // I3 인터페이스에 따라 B 메소드 구현 
    public String B(){
        return "B";
    }
}

public class PolyDemo2 {

	public static void main(String[] args) {
		D obj = new D(); // 클래스와 데이터 타입 동일
        I2 objI2 = new D(); // 데이터타입 I2(구현하고 있는 인터페이스 중 하나)
        I3 objI3 = new D(); // 데이터타입 I3
         
        // 데이터 타입 D
        // D가 정의하고 있는 멤버를 모두 사용할 수 있다
        // 밑의 코드는 아무런 문제 없이 작동 
        obj.A();
        obj.B();
        
        // 인터페이스 I2인것처럼 행세하고 있는 것 
        // I2를 보면 메소드 A의 구현을 강제하고 있는 것 
        // 즉 메소드 A만을 가지고있는 클래스인것처럼 동작하게 됨 
        // 따라서 B메소드는 실행되지 않음. 에러 
        objI2.A();
        //objI2.B();
         
        // 인터페이스 I3인것처럼 행세하고 있는 것 
        // I3를 보면 메소드 B의 구현을 강제하고 있는 것 
        // 즉 메소드 B만을 가지고있는 클래스인것처럼 동작하게 됨 
        // 따라서 A메소드는 실행되지 않음. 에러 
        
        //objI3.A();
        objI3.B();

        // 결론
        // 어떤 클래스의 데이터타입으로 인터페이스를 사용한다는 것은 마치 그 클래스가
        // 그 인터페이스에서 정의한 멤버들만을 가지고있는 클래스인 것처럼 사용할 수 있게 된다.

        // 각각의 인터페이스들이라는 것은 인터페이스로 그룹핑되어있는 메소드와 변수의 집합.
        // 만약 클래스를 사용할 때 그 클래스가 갖고있는 모든 기능을 사용해야 한다면
        // 클래스의 데이터타입을 D라고 정의해주면되겠지만
        // 어떤 클래스를 사용할 때 그 클래스의 기능 중에서 클래스의 특정한 인터페이스에 해당하는 기능만을 
        // 사용하고 싶다면, 데이터타입으로 인터페이스를 지정해주면 인터페이스에서 정의하고있는
        // 멤버들을 제외한 것은 클래스를 사용하는 사람이 신경쓰지 않도록 해줄 수있다. 
        // 예를 들어, 스마트폰이 있을 때, 게임기로도 쓰고 전화기로도, 브라우저로도 쓴다.
        // 그럼 원래는 스마트폰 전체의 기능을 사용할 수 있는데, 
        // 만약 어린 아이에게 스마트폰을 줄때, 브라우저의 기능만을 사용하도록 할 수있을 것.
        // 그럼 이 스마트폰이라는 클래스를 브라우저의 인터페이스만 사용하기 때문에
        // 그 외의 기능들은 사용하지 않게 되고, 나머지 기능들을 신경쓰지 않고 검색이라는 기능에만
        // 집중할 수 있다는 의의. 
        
        // 하나의 인터페이스가 있고 이를 구현하고있는 여러개의 클래스가 존재한다면,
        // 각각의 클래스들을 인스턴스화 시킬 때 데이터타입으로 공통적으로구현하고있는 
        // 인터페이스를 데이터타입으로 해서 같은 데이터타입을 가지고 있지만
        // 실제 클래스가 무엇이냐에 따라서 다르게 동작하도록 하는 것이 다형성 구현. 
	}

}
